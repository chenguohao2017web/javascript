<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="style/main.css">
    <title>Document</title>
</head>
<body>
    <div id="box">
        <ul>
            <li><a href="#"><img src="./img/1.png" alt=""></a></li>
            <li><a href="#"><img src="./img/2.png" alt=""></a></li>
            <li><a href="#"><img src="./img/3.png" alt=""></a></li>
        </ul>
        <div id="btn">
            <span class="active"></span><span></span><span>
        </div>
        <div id="prev">prev</div>
        <div id="next">next</div>
    </div>
    <script src="./js/main.js"></script>
</body>
</html>

body,
ul,
ol {
  margin: 0;
  padding: 0;
}
li {
  list-style: none;
}
#box {
  width: 600px;
  height: 300px;
  margin: 100px auto;
  position: relative;
  overflow: hidden;
}
#box ul {
  position: absolute;
  left: 0;
  top: 0;
  height: 300px;
}
#box ul li {
  float: left;
  width: 600px;
  height: 300px;
}
#box ul li a {
  display: block;
  height: 300px;
}
#box ul li a img {
  width: 100%;
  height: 100%;
}
#box #btn {
  position: absolute;
  bottom: 10px;
  left: 0;
  width: 100%;
  text-align: center;
}
#box #btn span {
  display: inline-block;
  width: 20px;
  height: 20px;
  background: rgba(0, 0, 0, 0.4);
  border-radius: 50%;
  margin: 0 10px;
}
#box #btn span.active {
  background: rgba(250, 250, 250, 0.8);
}
#box #prev,
#box #next {
  position: absolute;
  top: 130px;
  height: 60px;
  line-height: 60px;
  text-align: center;
  font-size: 30px;
  background: rgba(0, 0, 0, 0.4);
  color: #fff;
  cursor: pointer;
}
#box #prev {
  left: 0;
}
#box #next {
  right: 0;
}

window.onload = function () {
    var oDiv = document.getElementById("box");
    var oUl = oDiv.getElementsByTagName("ul")[0];
    var aLi = oUl.getElementsByTagName("li");
    var oBtn = document.getElementById("btn");
    var aSpan = oBtn.children;
    var prev = document.getElementById("prev");
    var next = document.getElementById("next");
    var currentIndex = 0;
    var timer = null;

    var lastChild = oUl.children[0].cloneNode(true);  //复制第一张
    var firstChild = oUl.children[aLi.length-1].cloneNode(true); //复制最后一 张
    oUl.appendChild(lastChild);  //放置到最后的位置;
    oUl.insertBefore(firstChild,aLi[0]);//将最后一张放置到第一的位置。

    oUl.style.width = aLi[0].offsetWidth * aLi.length + 'px'; //设置总ul长度

    //初始化oUl的位置
    oUl.style.left = -aLi[0].offsetWidth + 'px';

    function getStyle(obj, attrName) {
        if (obj.currentStyle) {
            return obj.currentStyle[attrName]
        }
        else {
            return getComputedStyle(obj, false)[attrName]
        }
    }
    //运动框架主体  startMove( obj,{attr:iTarget,attr:iTarget},callback )
    function startMove(obj, json, callback) {
        clearInterval(obj.timer)
        obj.timer = setInterval(function () {
            var bStop = true //假设所有值都已经完成
            for (var attr in json) {
                //解决opacity兼容属性问题
                var current = 0
                if (attr == 'opacity') {
                    //Math.round => 将计算机误差四舍五入
                    current = Math.round(parseFloat(getStyle(obj, attr)) * 100)    // 0.3 => 30 opacity
                }
                else {
                    current = parseInt(getStyle(obj, attr))   //其他属性
                }
                var speed = (json[attr] - current) / 10
                speed = speed > 0 ? Math.ceil(speed) : Math.floor(speed)
                if (current != json[attr])  //循环中检测json键值对是否已经都达到目标值，如果没有就变false
                {
                    bStop = false
                }
                else {
                    bStop = true
                }
                if (attr == 'opacity') {
                    obj.style.filter = 'alpha(opacity' + (current + speed) + ')'
                    obj.style.opacity = (current + speed) / 100   //返回小数给高版本浏览器
                }
                else {
                    obj.style[attr] = current + speed + 'px'
                }
            } //for in 循环结束
            if (bStop)   //循环结束如果bstop返回true 说明已经完成了所有动作  可以清楚定时器 进行callback
            {
                clearInterval(obj.timer)
                if (callback) {
                    callback()
                }
            }
        }, 30)
    }

    function autoPlay() {
        timer = setInterval(function () {
            currentIndex++; // 0 - 1 - 2     0 -1 -2
            move();
        }, 2000)

    }
    function move() {
        if(currentIndex == aLi.length-1){
            oUl.style.left = 0;
            currentIndex = 1;
        }else if(currentIndex==0){
            
            oUl.style.left = -aLi[0].offsetWidth * (aLi.length-1) + 'px';
            currentIndex = aLi.length-2;
        }
        startMove(oUl, { 'left': -currentIndex * aLi[0].offsetWidth });
        btnMove();
    }

    function btnMove(index){
        for(var i=0;i<aSpan.length;i++){
            aSpan[i].className = "";
        }
        if(!index){
            aSpan[currentIndex-1].className = "active";
        }else{
            aSpan[index-1].className = "active";
        }
    }

    for(var i=0;i<aSpan.length;i++){
        aSpan[i].setAttribute("index",i+1);
        aSpan[i].onclick = function(){
            var index = this.getAttribute("index");
            currentIndex = index;
            startMove(oUl,{'left':-index * aLi[0].offsetWidth})
            btnMove(index);
        }
    }

    oDiv.onmouseover = function () {
        clearInterval(timer);
    }

    oDiv.onmouseout = function () {
        autoPlay();
    }

    prev.onclick = function () {
        currentIndex--;
        move();
    }
    next.onclick = function () {
        currentIndex++;
        move();
    }
    autoPlay();
}
